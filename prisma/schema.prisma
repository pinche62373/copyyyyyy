datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id    String @id @default(cuid())
  email String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  password Password?
  roles    Role[]
  sessions Session[]
  notes    Note[]
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  users       User[]
  permissions Permission[]
}

model Permission {
  id          String @id @default(cuid())
  entity      String // e.g. note, user, etc.
  action      String // e.g. create, read, update, delete
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Note {
  id    String @id @default(cuid())
  title String
  body  String

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String
}

model Language {
  id   String @id @default(cuid())
  name String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

model Region {
  id   String @id @default(cuid())
  name String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  countries Country[]
}

model Country {
  id   String @id @default(cuid())
  name String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt

  region   Region @relation(fields: [regionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  regionId String
}

model Movie {
  id   String @id @default(cuid())
  name String @unique
  slug String @unique

  createdAt DateTime  @default(now())
  updatedAt DateTime? @updatedAt
}

// memory table to ensure historically unique permalinks
model PermaLink {
  id   Int    @id @default(autoincrement())
  slug String @unique

  createdAt DateTime @default(now())
}
